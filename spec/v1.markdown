---
title: JSON Schema Dataset
description: A vocabulary for defining datasets using JSON and JSON Schema
version: v1
---

This vocabulary introduces a set of annotation keywords for defining
JSON-compatible datasets using JSON Schema 2020-12.

Motivation
----------

The top findings from User Experience Research of data scientist and business intelligence analysts were that the most frequent and the most impactful pain points in their workflows stemmed from working with what we define as incomplete data products.

We define a data product, at its most fundamental unit, as simply as one would define a can of soup as a product. The can of soup comes with a Nutrition Label, making it easy to search for ingredients within the canned product, as well as a UPC Label, brand, and product name, making the can of soup easy to find, and finally the soup itself. 

Likewise, when we get a data product, we want to define a singular object that contains:

- The dataset, what we will refer to as the **'data'**.
- Data for how to search <i>in</i> the dataset, what we will refer to as **'schema'** data.
- Data for how to search <i>for</i> the dataset, what we will refer to as **'meta'** data.

These three elements need to exist in order for a data product to be considered complete, and need to be together as one object.

### Why Data Products Are Essential

Data teams often report not knowing where data comes from, or complex 3rd party tools that require licenses or experience to use in order to get important and often critical information on data. The result of a lack of a standard means that hundreds, even thousands of data sets are throwin in storage, and then left to others to sort through, with no understanding of where data came from, or what terms in columns mean.

This lack of understanding about the data can result in wasted time in meetings, or worse, in wrong knowledge being created, which often can result in real-world negative consequences with deadlines missed, or at its worst, products that may be harmful to health because of a lack of knowledge about other existing data that could have prevented errors.

Combining data, metadata, and schema is essential because it saves time, prevents errors, reduces ambiguity, and having a singular extensible object that can be used by others enhances productivity and innovative capabilities. Most importantly to businesses, it saves businesses time, money, and risk.

### Data Contracts vs Data Products vs Schemas

There is a lot of debate between terms such as 'data products', and 'data contracts', and the proposed definitions have one goal: the simplest, least friction, and easiest definitions to learn and begin using, independent of any commercial product, in a generalizable fashion.

- **Data Products** have the data, the schema, and the meta data all in one object.

- A **Data Contract** contains the information that specifies what is a complete Data Product given a specific business need beyond the simple definition of a Data Product. There may be a set of compliance, requirements, and/or governance features for a data product. Federal Regulations may require (for example) data lineage for medical data, then defining how that will be captured, and whether it is captured in the data product can be added in an SLA (service level agreement). A Data Contract may alter of define a Data Contract so that data is a third party reference versus being included in the data product itself (the data may be exceptionally large, there might be legal or privacy rules, etc.). The country of origin (lineage), UPC label, and the nutrition label are all part of contractual requirement for a grocery store to sell a can of soup. However, for FDA submission to sell a new product, a modified data contract may be required, even though the contents might be the same.

- When thinking of a **schema vs data contract** it is helpful to have clear boundaries. While colloquially a schema can often be referred to as a 'contract', and while that a schema as a contract certainly makes sense, there are clear and simple differing definitions in this vocabulary specification proposal. A schema does not necessarily require a data product definition, and can be be completely independent of containing business relationships that define which schema to use with which data products, for which problems, and which regulatory needs. A new language definition to define these emerging and important needs in the data community is required. Therefore, a data contract can be thought of as the meta-schema that requires grocery stores to have canned soup (data products) that have nutrition labels (schema).


Keywords
--------

### `dataset`

This keyword MUST be defined at the root of the schema. This keyword MUST be a
JSON array where each item successfully validates against the schema. An empty
array is permitted. A dataset document is not valid if it does not set this
keyword.

"Dataset" can be thought of as our "Data Product", using the "can of soup" analogy from above.

### `data` (required)
This keyword contains the data itself.

### `meta` (required?)
This is where we would link any references to <i>Searching For</i> data, it is for the external world of the dataset. Who is using it? Why do they need it? Where was it created, etc. This can reference the JSON-schema object if it already exists, or be added here.

### `meta.format`
This keyword contains how the data is formatted.
- row: [['column_A', 'column_B'], [1, 2, 3], [4, 5, 6]]
- columnar: { "column_A": [1, 2, 3], "column_B":[4, 5, 6] }

### `meta.markdown` (optional)
Refers to any markdown documentation of the dataset

### `meta.description` (optional)
Refers to any description of the data set

### `meta.source` (optional)
Refers to where was the data derived from

### `concepts` (required?)
This is where we define <i>Searching Within</i> data properties.

### `concepts.headers`
This is where the headers are defined, whether a reference to the JSON-schema object, created newly, or if the information already exists in the JSON-Schema object it can be ignored.

### `concepts.values`
Reducing ambiguity is a main goal of semantic information, and being able to define that column A's definition of the word "Quality" may refer to the "quality control team", and column B's definition may refer to the "inspection approval process by regulators" is incredibly valuable to understanding data. Concepts.values is where we can define the specific meaning of values, relative to individual columns

### `concepts.features`
There may be certain features of our data set that are not explicit in our data set headers or values. For example, a data scientist may want to add that a certain value in a certain column is related to an outlier event. The Concepts.Features table allows us to add custom labels/features to a column or value, in order to enrich the data set.

### `lineage` (optional)
This property enables recording of transformations on the data, which can be very important for data scientists to understand how data was changed and trace back any logic. This can reveal any bias, or be critical for legal and regulatory compliance in certain industries.

### `governance` (optional)
This property includes any service level agreements between parties, roles, security, access, between parties who want to use the data.

Examples
--------

Acknowledgments
---------------
