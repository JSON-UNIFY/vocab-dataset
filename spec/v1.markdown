---
title: JSON Schema Dataset
description: A vocabulary for defining datasets using JSON and JSON Schema
version: v1
---

This vocabulary introduces a set of annotation keywords for defining
JSON-compatible datasets using [JSON Schema 2020-12][json-schema-2020-12].

Motivation
----------

The top findings from User Experience Research of data scientist and business intelligence analysts were that the most frequent and the most impactful pain points in their workflows stemmed from working with what we define as incomplete data products.

We define a data product, at its most fundamental unit, as simply as one would define a can of soup as a product. The can of soup comes with a Nutrition Label, making it easy to search for ingredients within the canned product, as well as a UPC Label, brand, and product name, making the can of soup easy to find, and finally the soup itself.

Likewise, when we get a data product, we want to define a singular object that contains:

- The dataset, what we will refer to as the **'data'**.
- Data for how to search <i>in</i> the dataset, what we will refer to as **'schema'** data (such as concepts used in headers and values).
- Data for how to search <i>for</i> the dataset, what we will refer to as **'meta'** data (such as the title, source, and business purpose).

These three elements need to exist in order for a data product to be considered complete, and need to be together as one object.

### Why Data Products Are Essential

Data teams often report not knowing where data comes from, or complex 3rd party tools that require licenses or experience to use in order to get important and often critical information on data. The result of a lack of a standard means that hundreds, even thousands of data sets are throwin in storage, and then left to others to sort through, with no understanding of where data came from, or what terms in columns mean.

This lack of understanding about the data can result in wasted time in meetings, or worse, in wrong knowledge being created, which often can result in real-world negative consequences with deadlines missed, or at its worst, products that may be harmful to health because of a lack of knowledge about other existing data that could have prevented errors.

Combining data, metadata, and schema is essential because it saves time, prevents errors, reduces ambiguity, and having a singular extensible object that can be used by others enhances productivity and innovative capabilities. Most importantly to businesses, it saves businesses time, money, and risk.

### Data Contracts vs Data Products vs Schemas

There is a lot of debate between terms such as 'data products', and 'data contracts', and the proposed definitions have one goal: the simplest, least friction, and easiest definitions to learn and begin using, independent of any commercial product, in a generalizable fashion.

**Data Products as Defined in the JSON-Unify Vocabulary** 
Data products have the data (or reference to it), the schema (conceptual definitions in the data), and the meta data (information about the data not included in the data set) all in one object. They are a complete unit, and just like consumer products, an important goal is to make the developer experience of a data product as efficient and smooth as possible for them to achieve their tasks with data. The simple and fundamental rule of having the meta, schema, and data information bundled into one unlocks value for data consumers and producers.

**Data Contract as Defined in the JSON-Unify Vocabulary** 
Specifies requirements between parties who share & communicate data products. There may be a set of compliance, requirements, and/or governance features for a data product between sender and receiver of a data product. The data product hasn't changed, but agreements between users of the data might be differentiated. One group may say *Data Product X will use Data Contract Y*, and another may say *Data Product X will use Data Contract Z*.

### Example Data Contract for a Data Product
- Federal Regulations may require certain data lineage for medical data, and defining how that will be captured can be added in a SLA (service level agreement) of a data product. A data contract may define a collection of multiple service level agreements. A hospital might have the same data product for internal (employee) and external (FDA regulators) users, and this enables modularity.

### Data Contracts using the Can of Soup Example
Selling food products requires listing a country of origin (lineage) on our can of soup, UPC label (meta data), and the nutrition label (schema), as part of a contractual requirement for a grocery store to legally sell a can of soup. While most food products might require these elements, a can of soup might have service level agreements with the supplier that about how to handle cans that are dented, whereas a bag of chips would not. If all cans of soup share the same collection of agreements, all different brands can share a reference to a singular data contract for the industry, versus each brand independently having their own contract.


Constraints
-----------

### `title`

Using this vocabulary enforces the use of the
[`title`][json-schema-2020-12-title] keyword from the JSON Schema
[Meta-Data][json-schema-2020-12-meta-data] vocabulary at the root of the
schema.

Keywords
--------

### `dataset`

This keyword MUST be defined at the root of the schema. This keyword MUST be a
JSON array where each item successfully validates against the schema, or a JSON
object that makes use of the [`$ref`][json-schema-2020-12-ref] keyword from the
[Core][json-schema-2020-12-core] JSON Schema vocabulary to point to a remote
JSON array. An empty array is permitted.

A dataset document is not valid if it does not set this keyword.

### `datasetAuthors`

This optional keyword denotes the authors of the given dataset. If set, it MUST
consist of a non-empty JSON array of strings.

### `datasetDocumentation`

This optional keyword denotes the URL to human-readable documentation for the
dataset. If set, it MUST consist of a URI [RFC3986][RFC3986] string.

### `datasetLineage`

This optional keyword records the lineage of the dataset defined by the
`dataset` keyword. It records modifications to the dataset is a manner that
resembles version control.  If set, it MUST correspond to a JSON Patch
[RFC6902][RFC6902] document.

### `meta.source` (optional)
Refers to where was the data derived from

### `governance` (optional)
This property includes any service level agreements between parties, roles, security, access, between parties who want to use the data.

Recommendations
---------------

### Metadata

Metadata for the dataset is a key element for a data product to be considered
complete. The use of this vocabulary encourages schema authors to make use of
the JSON Schema [Meta-Data][json-schema-2020-12-meta-data] vocabulary at the
top-level of the schema and in any sub-properties it defines as thoroughly as
possible.

Examples
--------

Acknowledgments
---------------

[json-schema-2020-12]: https://json-schema.org/draft/2020-12/json-schema-core.html
[json-schema-2020-12-core]: https://json-schema.org/draft/2020-12/json-schema-core.html#name-the-json-schema-core-vocabu
[json-schema-2020-12-meta-data]: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-a-vocabulary-for-basic-meta
[json-schema-2020-12-ref]: https://json-schema.org/draft/2020-12/json-schema-core.html#ref
[json-schema-2020-12-title]: https://json-schema.org/draft/2020-12/json-schema-validation.html#name-title-and-description
[RFC3986]: https://www.rfc-editor.org/rfc/rfc3986
[RFC6902]: https://www.rfc-editor.org/rfc/rfc6902
